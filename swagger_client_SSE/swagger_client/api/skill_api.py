# coding: utf-8

"""
    Skill Repository

    The API description of the Skill Repository.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SkillApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def skill_mgmt_controller_adapt_repo(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_adapt_repo  # noqa: E501

        Adapts a repository and returns the adapted it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_adapt_repo(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositoryDto body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_adapt_repo_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_adapt_repo_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_adapt_repo_with_http_info(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_adapt_repo  # noqa: E501

        Adapts a repository and returns the adapted it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_adapt_repo_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositoryDto body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_adapt_repo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_adapt_repo`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/repository/adapt', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_adapt_skill(self, body, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_adapt_skill  # noqa: E501

        Adapts a skill at the specified repository and returns the adapted skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_adapt_skill(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillCreationDto body: (required)
        :param str repository_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_adapt_skill_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_adapt_skill_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_adapt_skill_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_adapt_skill  # noqa: E501

        Adapts a skill at the specified repository and returns the adapted skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_adapt_skill_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillCreationDto body: (required)
        :param str repository_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_adapt_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_adapt_skill`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `skill_mgmt_controller_adapt_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/{repositoryId}/skill/adapt_skill', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_add_skill(self, body, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_add_skill  # noqa: E501

        Creates a new skill at the specified repository and returns the created skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_add_skill(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillCreationDto body: (required)
        :param str repository_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_add_skill_with_http_info(body, repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_add_skill_with_http_info(body, repository_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_add_skill_with_http_info(self, body, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_add_skill  # noqa: E501

        Creates a new skill at the specified repository and returns the created skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_add_skill_with_http_info(body, repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillCreationDto body: (required)
        :param str repository_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_add_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_add_skill`")  # noqa: E501
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `skill_mgmt_controller_add_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/{repositoryId}/skill/add_skill', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_create_repository(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_create_repository  # noqa: E501

        Creates a new skill repository for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_create_repository(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositoryCreationDto body: (required)
        :return: SkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_create_repository_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_create_repository_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_create_repository_with_http_info(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_create_repository  # noqa: E501

        Creates a new skill repository for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_create_repository_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositoryCreationDto body: (required)
        :return: SkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_create_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_create_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_delete_repo(self, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_delete_repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_delete_repo(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_delete_repo_with_http_info(repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_delete_repo_with_http_info(repository_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_delete_repo_with_http_info(self, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_delete_repo  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_delete_repo_with_http_info(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_delete_repo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `skill_mgmt_controller_delete_repo`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/{repositoryId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_delte_skill(self, skill_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_delte_skill  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_delte_skill(skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_delte_skill_with_http_info(skill_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_delte_skill_with_http_info(skill_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_delte_skill_with_http_info(self, skill_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_delte_skill  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_delte_skill_with_http_info(skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skill_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_delte_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'skill_id' is set
        if ('skill_id' not in params or
                params['skill_id'] is None):
            raise ValueError("Missing the required parameter `skill_id` when calling `skill_mgmt_controller_delte_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'skill_id' in params:
            path_params['skillId'] = params['skill_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/skill/delete/{skillId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_find_skills(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_find_skills  # noqa: E501

        Lists all skills.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_find_skills(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillSearchDto body: (required)
        :return: SkillListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_find_skills_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_find_skills_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_find_skills_with_http_info(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_find_skills  # noqa: E501

        Lists all skills.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_find_skills_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillSearchDto body: (required)
        :return: SkillListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_find_skills" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_find_skills`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/findSkills', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_find_skills_resolved(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_find_skills_resolved  # noqa: E501

        Lists all skills.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_find_skills_resolved(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillSearchDto body: (required)
        :return: ResolvedSkillListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_find_skills_resolved_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_find_skills_resolved_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_find_skills_resolved_with_http_info(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_find_skills_resolved  # noqa: E501

        Lists all skills.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_find_skills_resolved_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillSearchDto body: (required)
        :return: ResolvedSkillListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_find_skills_resolved" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_find_skills_resolved`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/resolve/findSkills', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResolvedSkillListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_get_resolved_skill(self, skill_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_get_resolved_skill  # noqa: E501

        Returns the specified skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_get_resolved_skill(skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_id: (required)
        :return: ResolvedSkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_get_resolved_skill_with_http_info(skill_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_get_resolved_skill_with_http_info(skill_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_get_resolved_skill_with_http_info(self, skill_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_get_resolved_skill  # noqa: E501

        Returns the specified skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_get_resolved_skill_with_http_info(skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_id: (required)
        :return: ResolvedSkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skill_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_get_resolved_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'skill_id' is set
        if ('skill_id' not in params or
                params['skill_id'] is None):
            raise ValueError("Missing the required parameter `skill_id` when calling `skill_mgmt_controller_get_resolved_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'skill_id' in params:
            path_params['skillId'] = params['skill_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/resolve/skill/{skillId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResolvedSkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_get_skill(self, skill_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_get_skill  # noqa: E501

        Returns the specified skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_get_skill(skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_get_skill_with_http_info(skill_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_get_skill_with_http_info(skill_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_get_skill_with_http_info(self, skill_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_get_skill  # noqa: E501

        Returns the specified skill.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_get_skill_with_http_info(skill_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str skill_id: (required)
        :return: SkillDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skill_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_get_skill" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'skill_id' is set
        if ('skill_id' not in params or
                params['skill_id'] is None):
            raise ValueError("Missing the required parameter `skill_id` when calling `skill_mgmt_controller_get_skill`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'skill_id' in params:
            path_params['skillId'] = params['skill_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/skill/{skillId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_list_repositories(self, owner, **kwargs):  # noqa: E501
        """skill_mgmt_controller_list_repositories  # noqa: E501

        Lists all repositories of the specified user, without showing its content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_list_repositories(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: (required)
        :return: SkillRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_list_repositories_with_http_info(owner, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_list_repositories_with_http_info(owner, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_list_repositories_with_http_info(self, owner, **kwargs):  # noqa: E501
        """skill_mgmt_controller_list_repositories  # noqa: E501

        Lists all repositories of the specified user, without showing its content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_list_repositories_with_http_info(owner, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str owner: (required)
        :return: SkillRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_list_repositories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner' is set
        if ('owner' not in params or
                params['owner'] is None):
            raise ValueError("Missing the required parameter `owner` when calling `skill_mgmt_controller_list_repositories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'owner' in params:
            path_params['owner'] = params['owner']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/{owner}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillRepositoryListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_load_repository(self, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_load_repository  # noqa: E501

        Returns one repository and its unresolved elements. Skills and their relations are handled as IDs and need to be resolved on the client-side.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_load_repository(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: UnresolvedSkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_load_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_load_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_load_repository_with_http_info(self, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_load_repository  # noqa: E501

        Returns one repository and its unresolved elements. Skills and their relations are handled as IDs and need to be resolved on the client-side.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_load_repository_with_http_info(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: UnresolvedSkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_load_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `skill_mgmt_controller_load_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/byId/{repositoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UnresolvedSkillRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_load_resolved_repository(self, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_load_resolved_repository  # noqa: E501

        Returns one resolved repository and its elements. Skills and their relations are resolved at the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_load_resolved_repository(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: ResolvedSkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_load_resolved_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_load_resolved_repository_with_http_info(repository_id, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_load_resolved_repository_with_http_info(self, repository_id, **kwargs):  # noqa: E501
        """skill_mgmt_controller_load_resolved_repository  # noqa: E501

        Returns one resolved repository and its elements. Skills and their relations are resolved at the server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_load_resolved_repository_with_http_info(repository_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str repository_id: (required)
        :return: ResolvedSkillRepositoryDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['repository_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_load_resolved_repository" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'repository_id' is set
        if ('repository_id' not in params or
                params['repository_id'] is None):
            raise ValueError("Missing the required parameter `repository_id` when calling `skill_mgmt_controller_load_resolved_repository`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'repository_id' in params:
            path_params['repositoryId'] = params['repository_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories/resolve/{repositoryId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResolvedSkillRepositoryDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def skill_mgmt_controller_search_for_repositories(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_search_for_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_search_for_repositories(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositorySearchDto body: (required)
        :return: SkillRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.skill_mgmt_controller_search_for_repositories_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.skill_mgmt_controller_search_for_repositories_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def skill_mgmt_controller_search_for_repositories_with_http_info(self, body, **kwargs):  # noqa: E501
        """skill_mgmt_controller_search_for_repositories  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.skill_mgmt_controller_search_for_repositories_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SkillRepositorySearchDto body: (required)
        :return: SkillRepositoryListDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method skill_mgmt_controller_search_for_repositories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `skill_mgmt_controller_search_for_repositories`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/skill-repositories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SkillRepositoryListDto',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
